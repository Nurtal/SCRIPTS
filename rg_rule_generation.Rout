
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> library(arules)
Le chargement a nécessité le package : Matrix

Attachement du package : 'arules'

The following objects are masked from 'package:base':

    abbreviate, write

> #library(arulesViz)
> 
> 
> # where am i 
> info = Sys.info()
> os = info[["sysname"]]
> data_file_name = "undef"
> login = info[["login"]]
> 
> #load data
> if(identical(os, "Windows")){
+   #-Windows
+   data_file_name = paste("C:\\Users\\", login, "\\Desktop\\Nathan\\SpellCraft\\SCRIPTS\\data\\rg_data_filtered.txt", sep="")
+   features_saved_file = paste("C:\\Users\\", login, "\\Desktop\\Nathan\\SpellCraft\\SCRIPTS\\data\\rg_feature_selected.txt", sep="")
+   save_rules_file = paste("C:\\Users\\", login, "\\Desktop\\Nathan\\SpellCraft\\SCRIPTS\\data\\rg_all_rules.txt", sep="")
+   save_rules_file_2 = paste("C:\\Users\\", login, "\\Desktop\\Nathan\\SpellCraft\\SCRIPTS\\data\\rg_all_rules_filtered.txt", sep= "")
+   
+ }else{
+   #-Linux
+   data <- read.csv("/home/foulquier/Bureau/SpellCraft/WorkSpace/SCRIPTS/data/clinical_data_phase_1.csv", stringsAsFactors=TRUE)
+ }
> data <- read.csv(data_file_name, stringsAsFactors=TRUE, sep=";")
> 
> 
> # Deal with NA
> # use only patient without NA ( drop control in the process ...)
> data = data[complete.cases(data),]
> data <- data.frame(lapply(data, as.factor))
> 
> 
> # mining
> rules <- apriori(data)
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen
        0.8    0.1    1 none FALSE            TRUE       5     0.1      1
 maxlen target   ext
     10  rules FALSE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 18 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[56 item(s), 184 transaction(s)] done [0.00s].
sorting and recoding items ... [34 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 done [0.00s].
writing ... [24 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
> rules.sorted <- sort(rules, by="lift")
> 
> # write rules into file
> rules_df = as(rules, "data.frame");
> write.table(rules_df, save_rules_file, sep=";")
> 
> # find redundant rules
> ## for better comparison we sort the rules by confidence and add Bayado's improvement
> rules <- sort(rules, by = "confidence")
> quality(rules)$improvement <- interestMeasure(rules, measure = "improvement")
> 
> # remove redundant rules
> rules_filtered <- rules[!is.redundant(rules)]
> 
> 
> # write non redundant rules into file
> rules_df = as(rules_filtered, "data.frame");
> write.table(rules_df, save_rules_file_2 , sep=";")
> 
> proc.time()
utilisateur     système      écoulé 
       4.79        0.37        5.34 
